***Projeto Marketplace***

-Este arquivo contem algumas anotações sobre o projeto criado.

	- Arquitetura de software do projeto: MVC.
		-Estudar sobre o conceito do MVC apoós o projeto.
	
	- Estudar a modelagem de dados com o Professor da Bóson treinamentos, pois, se faz necessário modelar
	o banco de dados e modelar o nosso sistema.

	- Banco de dados usado: MySQL.
 	
	-Anotações referentes a versão 0.1.
		-Estudar Vercionamento tambem.

09/09/2023
-CONFIGURAÇÕES DO PROJETO - BACKEND.
	
	-Após ter criado as pastas "api" e "Front-end", iniciei os modulos no npm.
	
	-Baixei os modulos: "express", "cors"(Estudar sobre), "mysql"(Tambem estudar).
	
	-alterei o tipo de importação do projeto para: module(nativo do JS).
		-"type":"module" -> o padrão que ja vem no NPM é o "commonjs"

	-Configurei o driver do banco de dados "db.js" para o devido acesso.
			- import mysql from "mysql";

			export const db = mysql.createConnection({
    				host: "localhost",
    				user: "root",
   					password: "Aguiar@123",
    				database: "db_marketplace"
			});
	
	-Configurei a pasta "router" com as rotas da aplicação.
	
	-Configurei o controlador - "products.js" que faz o gerenciamento da requizição com o banco de dados
	
	-Configurei o "app" adicionando o "app.use("/", productsRouter);" - req da pagina HOME


10/09/2023
-CONFIGURAÇÕES DO PROJETO - FRONT END.

	-Inicializamos baixando todas as dependencias necessárias para o projeto.
		-Axios, Vite-React, React-icons, React-toastify, Styled-components.

	-Baixei a fonte "Playfair display".

	-Limpamos todos os arquivos desnecessários quem vem após a instalação do Vite.

	-Começamos a estilização usando o "styled-components"
		-configurações de estilo global feito no arquivo JS chamado "globals" dentro de src.
	
	-Criamos um componente React dentro do arquivo"App.jsx" de estilização.

	-Criei a pasta "components" para a criação do Form.

	-Começamos a estilizar o formulário com o styled-component.

	-16/09/2023

	-Criamos o grid da tabela de produtos 

	- Agora estamos editando no App principal do Front a interação com o Back usando o axios.

	-Integrei o Front com o Back usando o Axios.

	-usamos o useEffect, useState, async await, props.
			const [products, setProducts] = useState([]);
			
			//Requisitar no Back end
			const getProducts = async () => {
				
				try{
				
				const res = await axios.get("http://localhost:3000/"); 
				setProducts(res.data);

				}catch(error){
				console.log(error);
				}

			};

			//Executar quando o front for chamado.
			useEffect(() => {
				getProducts();
				console.log(products)
			}, [setProducts]);
	
	06/10/2023

	- Finalizei o back end, implementando o CRUD basico.

	- Baixei o Insomnia para testar a api

	- criado essas funções para integrar com o banco de dados
	export const updateProducts = (req, res) => {
    //Query de busca SQL
   const q = "UPDATE products SET `product_name` = ?, `price`= ?, `stock`=?, `phone`=? WHERE `ID_product`=?";

   //Valores da requisição
   const values = [
        req.body.product_name,
        req.body.price,
        req.body.stock,
        req.body.phone
   ];

   //req.params.VARIAVEL pega um nome dinamico na url passado pelo rota.
   db.query(q, [...values, req.params.ID_product], (error) => {
        //verificar se aconteceu um erro
        if(error) return res.json(error);

        //Retorna um status e uma mensagem
        return res.status(200).json("Atualizado com sucesso");
   })
}

 

 -Terminei de fazer algumas rotas para serem observadas qualquer requisicao
		//Fazer um adicionamento de dados no DB.
		router.post("/", addProducts);
		//Deletar um dado - :ID_product = variavel dinamica
		router.delete("/:ID_product", deleteProduct);
		//Atualizar um dado - :ID_product = variavel dinamica
		router.put("/:ID_product", updateProducts);

07/10/2023
	-Criamos funçoes para integrar a API com o Front end

	-criação de um crud no react
	
	//lidar com envio de dados para a api
    const handleSubmit = async (ev) =>{
        ev.preventDefault();

        const product = ref.current;

        //Verificação de dados para prevenir valores nulos.
        if(!product.product_name.value || !product.price.value || !product.stock.value || !product.phone.value) {
            return toast.warn("Preencha todos os campos por favor! Não poder haver espaço em branco");
        }
    }

	//Lidar com exclusão
    const handleDelete = async ( id ) => {
        await axios.delete("http://localhost:3000/" + id).then( ({data}) => {
            console.log(data)

            //Filtra o Elemento a ser deletado
            const newArray = products.filter((product) => product.ID_product !== id )

            //Retorna o novo array filtrado das informações para o APP renderizar
            setProducts(newArray);

            //Exibir uma mensagem de sucesso
            toast.success(data)

        }).catch((data) => toast.error(data));

    }
	 //Lidar com a edição
    const handleEdit = (item) =>{
        setOnEdit(item);
    }


	-Usamos o axios que permite fazer essa intregração 

	-Estudar sobre o useRef pois nao havia compreendido muito bem o motivo dos dados serem editados dentro do input

	-Criamos a função para enviar dados ao banco de dados ou editar